from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup

from app.models import User, UserFile  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
from app.database import SessionLocal  # –ò–º–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–∏ –ë–î
from app.services import save_image, save_audio
from aiogram.dispatcher import FSMContext
from app.services import get_weather
from datetime import datetime
from aiogram.dispatcher.filters.state import StatesGroup, State
import os


class WeatherStates(StatesGroup):
    waiting_for_city = State()

def register_handlers(dp):
    @dp.message_handler(commands=['start'])
    async def cmd_start(message: types.Message):
        with SessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = User(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name
                )
                session.add(new_user)
                session.commit()

                # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
            weather_button = InlineKeyboardButton(
                text="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É üå§",
                callback_data="weather_request"
            )
            keyboard = InlineKeyboardMarkup().add(weather_button)

            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
            start_text = (
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.\n\n"
                "üìå –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∞—É–¥–∏–æ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –∏—Ö!\n"
                "üå§ –ò–ª–∏ —É–∑–Ω–∞–π —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É:"
            )

            await message.answer(start_text, reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data == 'weather_request')
    async def process_weather_button(callback_query: types.CallbackQuery):
        await callback_query.message.bot.answer_callback_query(callback_query.id)
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        await WeatherStates.waiting_for_city.set()

    @dp.message_handler(content_types=types.ContentType.PHOTO)
    async def handle_photo(message: types.Message):
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data/images –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            os.makedirs('data/images', exist_ok=True)

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            photo = message.photo[-1]
            file_info = await message.bot.get_file(photo.file_id)
            downloaded_file = await message.bot.download_file(file_info.file_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file_path = save_image(downloaded_file.read(), message.from_user.id)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            with SessionLocal() as session:
                file_record = UserFile(
                    user_id=message.from_user.id,
                    file_type='image',
                    file_path=file_path,
                    uploaded_at=datetime.now()
                )
                session.add(file_record)
                session.commit()

            await message.answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! üñºÔ∏è")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}")
            raise e

    @dp.message_handler(content_types=types.ContentType.AUDIO)
    async def handle_audio(message: types.Message):
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data/music –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            os.makedirs('data/music', exist_ok=True)

            audio = message.audio
            file_info = await message.bot.get_file(audio.file_id)
            downloaded_file = await message.bot.download_file(file_info.file_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ
            file_path = save_audio(downloaded_file.read(), message.from_user.id)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            with SessionLocal() as session:
                file_record = UserFile(
                    user_id=message.from_user.id,
                    file_type='music',
                    file_path=file_path,
                    uploaded_at=datetime.now()
                )
                session.add(file_record)
                session.commit()

            await message.answer("–ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üéµ")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
            raise e

    @dp.message_handler(content_types=types.ContentType.DOCUMENT)
    async def handle_document(message: types.Message):
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        if message.document.mime_type.startswith('image/'):
            await handle_photo(message)
        elif message.document.mime_type.startswith('audio/'):
            await handle_audio(message)

    @dp.message_handler(commands=['weather'])
    async def cmd_weather(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather"""
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        await WeatherStates.waiting_for_city.set()

    @dp.message_handler(state=WeatherStates.waiting_for_city)
    async def process_city(message: types.Message, state: FSMContext):
        try:
            city = message.text
            weather = get_weather(city)

            if not weather:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
                return

            temp = weather['main']['temp']
            feels_like = weather['main']['feels_like']
            humidity = weather['main']['humidity']
            description = weather['weather'][0]['description'].capitalize()

            reply = (
                f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n"
                f"üí≠ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"‚òÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}"
            )

            await message.answer(reply)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)}")
        finally:
            await state.finish()